!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG_WRITE_COUNT	rbtree_group.h	18;"	d
ENABLE_MEM_SIZE	rbtree_group.c	/^unsigned long long int ENABLE_MEM_SIZE = (1024 * 1024 * 1024);	\/\/ 8 GB => this means 8 * 1GB \/ 8;  "\/ 8" -> 64bit machine.$/;"	v
GROUP_SIZE	rbtree_group.c	/^int GROUP_SIZE = 0; $/;"	v
MEM_POOL_SIZE	buddy_allocator.h	4;"	d
NODE_SIZE	buddy_allocator.h	5;"	d
SIMUL_INIT_KEY	rbtree_group.h	8;"	d
SIMUL_MAX_ORDER	buddy_allocator.h	3;"	d
SIMUL_RB_BLACK	rbtree_group.h	7;"	d
SIMUL_RB_EXIST	rbtree_group.h	11;"	d
SIMUL_RB_IN_GROUP	rbtree_group.h	12;"	d
SIMUL_RB_NIL	rbtree_group.h	9;"	d
SIMUL_RB_NOT_EXIST	rbtree_group.h	10;"	d
SIMUL_RB_RED	rbtree_group.h	6;"	d
SWAP_COUNT	rbtree_group.h	13;"	d
WSS	rbtree_group.c	/^int WSS = 0;$/;"	v
_CRT_SECURE_NO_WARNINGS	rbtree_group.c	1;"	d	file:
_SIMUL_RBTREE_GROUP_H	rbtree_group.h	2;"	d
__list_add	linked_list.c	/^void __list_add(struct simul_list_head *new, struct simul_list_head *prev, struct simul_list_head *next)$/;"	f
__list_del	linked_list.c	/^void __list_del(struct simul_list_head * prev, struct simul_list_head * next) {$/;"	f
__list_del_entry	linked_list.c	/^void __list_del_entry(struct simul_list_head *entry) {$/;"	f
add_swap_list	rbtree_group.c	/^void add_swap_list(simul_rb_node *node) {$/;"	f
addr	buddy_allocator.h	/^	unsigned long *addr;$/;"	m	struct:simul_area
alloc_area	buddy_allocator.h	/^struct simul_free_area alloc_area[SIMUL_MAX_ORDER];$/;"	v	typeref:struct:simul_free_area
area	rbtree_group.h	/^	struct simul_area *area;$/;"	m	struct:simul_rb_key	typeref:struct:simul_rb_key::simul_area
area	rbtree_group.h	/^	struct simul_area *area;$/;"	m	struct:simul_rb_node	typeref:struct:simul_rb_node::simul_area
cnt_key	rbtree_group.h	/^	unsigned int cnt_key;$/;"	m	struct:simul_rb_node
cnt_node	rbtree_group.c	/^unsigned long long int cnt_node = 0;$/;"	v
container_of	linked_list.h	3;"	d
count	rbtree_group.h	/^	unsigned long count;$/;"	m	struct:simul_rb_node
end	buddy_allocator.h	/^	unsigned long end;$/;"	m	struct:simul_area
for_debug_init_sfull_memory	buddy_allocator.c	/^void for_debug_init_sfull_memory() {$/;"	f
for_debug_sfull_memory	buddy_allocator.c	/^void for_debug_sfull_memory() {$/;"	f
free_area	buddy_allocator.h	/^struct simul_free_area free_area[SIMUL_MAX_ORDER];$/;"	v	typeref:struct:simul_free_area
init_alloc_area	buddy_allocator.c	/^void init_alloc_area(struct simul_free_area *alloc_area) {$/;"	f
init_free_area	buddy_allocator.c	/^void init_free_area(struct simul_free_area *free_area) {$/;"	f
init_list_head	linked_list.c	/^void init_list_head(struct simul_list_head *list)$/;"	f
init_rb_key	rbtree_group.c	/^void init_rb_key(simul_rb_key *key_node, long long int key) {$/;"	f
init_rb_node	rbtree_group.c	/^void init_rb_node(simul_rb_root *T, simul_rb_node *node, simul_rb_key *key_node) {$/;"	f
init_rb_root	rbtree_group.c	/^void init_rb_root(simul_rb_root *root) {$/;"	f
init_swap_node	rbtree_group.c	/^void init_swap_node() {$/;"	f
is_free	rbtree_group.h	/^	unsigned int is_free;$/;"	m	struct:simul_rb_node
is_rb_black	rbtree_group.c	/^unsigned int is_rb_black(simul_rb_node *node) {$/;"	f
is_rb_red	rbtree_group.c	/^unsigned int is_rb_red(simul_rb_node *node) {$/;"	f
left_of	rbtree_group.c	/^simul_rb_node *left_of(simul_rb_node *node) {$/;"	f
list	buddy_allocator.h	/^	struct simul_list_head list;$/;"	m	struct:simul_area	typeref:struct:simul_area::simul_list_head
list	buddy_allocator.h	/^	struct simul_list_head list;$/;"	m	struct:simul_free_area	typeref:struct:simul_free_area::simul_list_head
list_add	linked_list.c	/^void list_add(struct simul_list_head *new, struct simul_list_head *head) {$/;"	f
list_add_tail	linked_list.c	/^void list_add_tail(struct simul_list_head *new, struct simul_list_head *head) {$/;"	f
list_del	linked_list.c	/^void list_del(struct simul_list_head *entry) {$/;"	f
main	rbtree_group.c	/^int main(int argc, char *argv[])$/;"	f
next	linked_list.h	/^	struct simul_list_head *next;$/;"	m	struct:simul_list_head	typeref:struct:simul_list_head::simul_list_head
next	rbtree_group.h	/^	struct simul_swap_node *next;$/;"	m	struct:simul_swap_node	typeref:struct:simul_swap_node::simul_swap_node
nil_node	rbtree_group.h	/^	simul_rb_node *nil_node;$/;"	m	struct:simul_rb_root
node	rbtree_group.h	/^	simul_rb_node *node;$/;"	m	struct:simul_swap_node
nr_free	buddy_allocator.h	/^	unsigned long nr_free;$/;"	m	struct:simul_free_area
output_mem	rbtree_group.c	/^void output_mem(char *fn, int line) {$/;"	f
output_sum	rbtree_group.c	/^void output_sum(char *fn) {$/;"	f
output_swap	rbtree_group.c	/^void output_swap(char *fn) {$/;"	f
output_var	rbtree_group.c	/^void output_var(char *fn) {$/;"	f
parent_of	rbtree_group.c	/^simul_rb_node *parent_of(simul_rb_node *node) {$/;"	f
prev	linked_list.h	/^	struct simul_list_head *prev;$/;"	m	struct:simul_list_head	typeref:struct:simul_list_head::simul_list_head
prev	rbtree_group.h	/^	struct simul_swap_node *prev;$/;"	m	struct:simul_swap_node	typeref:struct:simul_swap_node::simul_swap_node
rb_color	rbtree_group.h	/^	unsigned int rb_color;$/;"	m	struct:simul_rb_node
rb_key	rbtree_group.h	/^	long long int rb_key;$/;"	m	struct:simul_rb_key
rb_keys	rbtree_group.h	/^	struct simul_rb_key *rb_keys;$/;"	m	struct:simul_rb_node	typeref:struct:simul_rb_node::simul_rb_key
rb_left	rbtree_group.h	/^	struct simul_rb_node *rb_left;$/;"	m	struct:simul_rb_node	typeref:struct:simul_rb_node::simul_rb_node
rb_parent	rbtree_group.h	/^	struct simul_rb_node *rb_parent;$/;"	m	struct:simul_rb_node	typeref:struct:simul_rb_node::simul_rb_node
rb_right	rbtree_group.h	/^	struct simul_rb_node *rb_right;$/;"	m	struct:simul_rb_node	typeref:struct:simul_rb_node::simul_rb_node
remain_count	rbtree_group.c	/^unsigned long long int remain_count = 0;$/;"	v
right_of	rbtree_group.c	/^simul_rb_node *right_of(simul_rb_node *node) {$/;"	f
root_node	rbtree_group.h	/^	simul_rb_node *root_node;$/;"	m	struct:simul_rb_root
set_rb_black	rbtree_group.c	/^void set_rb_black(simul_rb_node *node) {$/;"	f
set_rb_red	rbtree_group.c	/^void set_rb_red(simul_rb_node *node) {$/;"	f
sfree	buddy_allocator.c	/^void sfree(void *block) {$/;"	f
sfull_mem	buddy_allocator.h	/^int sfull_mem[MEM_POOL_SIZE];$/;"	v
simul_area	buddy_allocator.h	/^struct simul_area {$/;"	s
simul_free	rbtree_group.c	/^void simul_free(simul_rb_node *node) {$/;"	f
simul_free_area	buddy_allocator.h	/^struct simul_free_area {$/;"	s
simul_list_head	linked_list.h	/^struct simul_list_head {$/;"	s
simul_rb_alloc_root	rbtree_group.c	/^simul_rb_root *simul_rb_alloc_root(void) {$/;"	f
simul_rb_delete	rbtree_group.c	/^int simul_rb_delete(simul_rb_root *T, long long int delkey) {$/;"	f
simul_rb_delete_all	rbtree_group.c	/^void simul_rb_delete_all(simul_rb_root *T, simul_rb_node *node) {$/;"	f
simul_rb_delete_fixup	rbtree_group.c	/^void simul_rb_delete_fixup(simul_rb_root *T, simul_rb_node *chg_node) {$/;"	f
simul_rb_insert	rbtree_group.c	/^int simul_rb_insert(simul_rb_root *T, long long int inkey) {$/;"	f
simul_rb_insert_fixup	rbtree_group.c	/^void simul_rb_insert_fixup(simul_rb_root *T, simul_rb_node *alt_node) {$/;"	f
simul_rb_key	rbtree_group.h	/^typedef struct simul_rb_key {$/;"	s
simul_rb_key	rbtree_group.h	/^} simul_rb_key;$/;"	t	typeref:struct:simul_rb_key
simul_rb_left_rotate	rbtree_group.c	/^simul_rb_node *simul_rb_left_rotate(simul_rb_root *T, simul_rb_node *node) {$/;"	f
simul_rb_minimum	rbtree_group.c	/^simul_rb_node *simul_rb_minimum(simul_rb_node *node) {$/;"	f
simul_rb_node	rbtree_group.h	/^typedef struct simul_rb_node {$/;"	s
simul_rb_node	rbtree_group.h	/^} simul_rb_node;$/;"	t	typeref:struct:simul_rb_node
simul_rb_pre_order	rbtree_group.c	/^void simul_rb_pre_order(simul_rb_root *T, simul_rb_node *node) {$/;"	f
simul_rb_right_rotate	rbtree_group.c	/^simul_rb_node *simul_rb_right_rotate(simul_rb_root *T, simul_rb_node *node) {$/;"	f
simul_rb_root	rbtree_group.h	/^typedef struct simul_rb_root {$/;"	s
simul_rb_root	rbtree_group.h	/^} simul_rb_root;$/;"	t	typeref:struct:simul_rb_root
simul_rb_search	rbtree_group.c	/^simul_rb_node *simul_rb_search(simul_rb_root *T, long long int find_key) {$/;"	f
simul_rb_search_key	rbtree_group.c	/^simul_rb_key *simul_rb_search_key(simul_rb_root *T, long long int find_key) {$/;"	f
simul_rb_successor	rbtree_group.c	/^simul_rb_node *simul_rb_successor(simul_rb_root* T, simul_rb_node *node) {$/;"	f
simul_rb_swapping	rbtree_group.c	/^void simul_rb_swapping(simul_rb_root *T) {$/;"	f
simul_rb_transplant	rbtree_group.c	/^unsigned int simul_rb_transplant(simul_rb_root *T, simul_rb_node *pre_node, simul_rb_node *chg_node) {$/;"	f
simul_swap_node	rbtree_group.h	/^struct simul_swap_node {$/;"	s
smalloc	buddy_allocator.c	/^void *smalloc(unsigned int size) {$/;"	f
start	buddy_allocator.h	/^	unsigned long start;$/;"	m	struct:simul_area
std_key	rbtree_group.h	/^	long long int std_key;$/;"	m	struct:simul_rb_node
swap_count	rbtree_group.c	/^unsigned long long int swap_count = 0;$/;"	v
swap_head	rbtree_group.c	/^struct simul_swap_node swap_head;$/;"	v	typeref:struct:simul_swap_node
write_count	rbtree_group.c	/^unsigned long long int write_count = 0;$/;"	v
